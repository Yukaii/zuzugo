// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model House {
  id        Int      @id @default(autoincrement())
  pk        String   @unique
  source    String
  data      Json? // raw JSON from the source
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LegacyHouse {
  id        Int      @id @default(autoincrement())
  pk        String   @unique
  source    String
  data      Json? // raw JSON from the source
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SlackAppInstallation {
  id                              Int       @id @default(autoincrement())
  clientId                        String?   @map("client_id")
  appId                           String?   @map("app_id")
  enterpriseId                    String?   @map("enterprise_id")
  enterpriseName                  String?   @map("enterprise_name")
  enterpriseUrl                   String?   @map("enterprise_url")
  teamId                          String?   @map("team_id")
  teamName                        String?   @map("team_name")
  botToken                        String?   @map("bot_token")
  botId                           String?   @map("bot_id")
  botUserId                       String?   @map("bot_user_id")
  botScopes                       String?   @map("bot_scopes")
  botRefreshToken                 String?   @map("bot_refresh_token")
  botTokenExpiresAt               DateTime? @map("bot_token_expires_at")
  userId                          String?   @map("user_id")
  userToken                       String?   @map("user_token")
  userScopes                      String?   @map("user_scopes")
  userRefreshToken                String?   @map("user_refresh_token")
  userTokenExpiresAt              DateTime? @map("user_token_expires_at")
  incomingWebhookUrl              String?   @map("incoming_webhook_url")
  incomingWebhookChannel          String?   @map("incoming_webhook_channel")
  incomingWebhookChannelId        String?   @map("incoming_webhook_channel_id")
  incomingWebhookConfigurationUrl String?   @map("incoming_webhook_configuration_url")
  isEnterpriseInstall             Boolean   @default(false) @map("is_enterprise_install")
  tokenType                       String    @default("bot") @map("token_type")
  installedAt                     DateTime  @default(now()) @map("installed_at")
}

model SlackInstallationToSubscription {
  id String @id @default(cuid())

  channelId String @map("channel_id")

  subscription        HouseSubscription @relation(fields: [houseSubscriptionId], references: [id])
  houseSubscriptionId String

  @@unique([channelId, houseSubscriptionId])
}

model HouseSubscription {
  id    String @id @default(cuid())
  query String

  SlackInstallationToSubscription SlackInstallationToSubscription[]
}
